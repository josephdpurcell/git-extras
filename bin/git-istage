#!/bin/bash
# #############################################################################
# Interactively stage files for committing.
#
# Source: https://github.com/josephdpurcell/git-extras
#
# TODO: Support using this without being in the root of the repo.
# #############################################################################

usage()
{
    echo "git-istage v1.2

Interactively stage files for committing.

This script assists with reviewing large sets of changes before committing. It
will iterate over all added, changed, removed, and untracked files giving you a
prompt to change its staged status, edit the file, and other operation.

Usage:

    git istage

For each file, you will be prompted to enter one of these values:

    y, Y, 1, yes             Stage the file
    n, N 0, no               Skip staging the file
    d, D, diff               Get the diff for the file
    e, E, edit               Edit the file (using $EDITOR)
    c, C, checkout           Checkout the file (destroy current changes)
    h, H, help               Print usage help
    x, X, q, Q, exit, quit   Quit
"
}

_wait_for_answer()
{
    # check first if the file is tracked
    # Reference 1: http://stackoverflow.com/a/2406813/990642
    # Reference 2: http://stackoverflow.com/a/2405572/990642
    git ls-files $file | grep . > /dev/null
    if [ $? -eq 0 ]
    then
        NEW_FILE=0
    else
        NEW_FILE=1
    fi

    if [ $ALL -eq 1 ]
    then
        answer="y"
    else
        if [ $NEW_FILE -eq 1 ]
        then
            read -p "Do you want to stage [NEW FILE] $file? " answer
        else
            read -p "Do you want to stage $file? " answer
        fi
    fi

    case "$answer" in
        [yY1] | 'yes' )
            STAGE=1
            _stage;;
        [nN0] | 'no' )
            echo "    Skipping $file";;
        [aA] | 'all' )
            STAGE=1
            ALL=1
            _stage;;
        [dD] | 'diff' )
            if [ $NEW_FILE -eq 0 ]
            then
                git diff $file
            else
                git diff --color -- /dev/null $file
            fi
            _wait_for_answer;;
        [eE] | 'edit' )
            $EDITOR $file
            _wait_for_answer;;
        [cC] | 'checkout' )
            git checkout $file;;
        [rR] | 'rm' )
            rm -i $file;;
        [hH] | 'help' )
            usage
            _wait_for_answer;;
        [xXqQ] | 'exit' | 'quit' )
            echo "Exiting";
            exit 0;;
        * )
            EXIT=1
            echo "Invalid response";
            exit 1;;
    esac
}

_stage()
{
    if [ $STAGE -eq 1 ]
    then
        echo "    Staging $file"
        git diff --diff-filter=D --name-only | grep $file --silent > /dev/null
        if [ $? -eq 0 ]
        then
            git rm $file
        else
            git add $file
        fi
    fi
}

# Note: --help gets captured prior to interactive staging.
if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
    usage
    exit 0
fi

# Make sure we are in the root.
CWD=`pwd`
ROOTDIR=`git rev-parse --show-toplevel`
cd $ROOTDIR

# Get tracked files.
FILES=`git diff --name-only`
ALL=0
EXIT=0
for file in $FILES
do
    STAGE=0
    _wait_for_answer
done

# Get untracked files.
UNTRACKED_FILES=`git ls-files --other --exclude-standard`
ALL=0
EXIT=0
if [ ! -z "$UNTRACKED_FILES" ]
then
    echo ""
    echo "Interactivly staging untracked files..."
    echo ""
fi
for file in $UNTRACKED_FILES
do
    STAGE=0
    _wait_for_answer
done

# Go back to current working directory.
cd $CURRDIR

exit $EXIT

