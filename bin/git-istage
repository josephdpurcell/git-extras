#!/bin/bash
# todo: support using this without being in the root of the repo
if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
    echo "git-istage v1.0"
    echo "
Interactively stage files for committing."
    echo ""
    echo "Usage:"
    echo ""
    echo "$ git istage"
    echo ""
    echo "Then, for each prompt you may enter any of the following:"
    echo "    y, Y, 1, yes) Stage the file"
    echo "    n, N 0, no) Skip staging the file"
    echo "    d, D, diff) Get the diff for the file"
    echo "    e, E, edit) Edit the file (using $EDITOR)"
    echo "    c, C, checkout) Checkout the file (destroy current changes)"
    echo "    x, X, q, Q, exit, quit) Quit"
    exit 0
fi

wait_for_answer()
{
    # check first if the file is tracked
    # Reference 1: http://stackoverflow.com/a/2406813/990642
    # Reference 2: http://stackoverflow.com/a/2405572/990642
    git ls-files $file | grep . > /dev/null
    if [ $? -eq 0 ]
    then
        NEW_FILE=0
    else
        NEW_FILE=1
    fi

    if [ $ALL -eq 1 ]
    then
        answer="y"
    else
        if [ $NEW_FILE -eq 1 ]
        then
            read -p "Do you want to stage [NEW FILE] $file? " answer
        else
            read -p "Do you want to stage $file? " answer
        fi
    fi

    case "$answer" in
        [yY1] | 'yes' )
            STAGE=1
            stage;;
        [nN0] | 'no' )
            echo "    Skipping $file";;
        [aA] | 'all' )
            STAGE=1
            ALL=1
            stage;;
        [dD] | 'diff' )
            if [ $NEW_FILE -eq 0 ]
            then
                git diff $file
            else
                git diff --color -- /dev/null $file
            fi
            wait_for_answer;;
        [eE] | 'edit' )
            $EDITOR $file
            wait_for_answer;;
        [cC] | 'checkout' )
            git checkout $file;;
        [rR] | 'rm' )
            rm -i $file;;
        [xXqQ] | 'exit' | 'quit' )
            echo "Exiting";
            exit 0;;
        * )
            EXIT=1
            echo "Invalid response";
            exit 1;;
    esac
}

stage()
{
    if [ $STAGE -eq 1 ]
    then
        echo "    Staging $file"
        git diff --diff-filter=D --name-only | grep $file --silent > /dev/null
        if [ $? -eq 0 ]
        then
            git rm $file
        else
            git add $file
        fi
    fi
}

# make sure we are in the root
CWD=`pwd`
ROOTDIR=`git rev-parse --show-toplevel`
cd $ROOTDIR

# tracked files
FILES=`git diff --name-only`
ALL=0
EXIT=0
for file in $FILES
do
    STAGE=0
    wait_for_answer
done

# untracked files
UNTRACKED_FILES=`git ls-files --other --exclude-standard`
ALL=0
EXIT=0
if [ ! -z "$UNTRACKED_FILES" ]
then
    echo ""
    echo "Interactivly staging untracked files..."
    echo ""
fi
for file in $UNTRACKED_FILES
do
    STAGE=0
    wait_for_answer
done

# go back to current working directory
cd $CURRDIR

exit $EXIT

